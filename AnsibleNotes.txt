Simple
Powerful
Developed by Redhat
Ansible Tower by Redhat is the web based interface for Ansible
Open Source
Cental point which controls other parts
Uses tools such as ssh

=======================

Installed on Computer(Main Ansible PC) and it communicates with other computers from there
nothing to install on client computer, just python and ssh is needed.
Some stuff can still be done using just ssh
Since it uses so much ssh, plan ssh access username(consistent across clients), sudo(good) or root(bad), passwordless keys or ssh-agent
After installing ansible, quick check:

amrinder@:~$ ansible localhost -m  ping
 [WARNING]: provided hosts list is empty, only localhost is available. Note
that the implicit localhost does not match 'all'

localhost | SUCCESS => {
    "changed": false, 
    "ping": "pong"
}
amrinder@:~$ 

for SSH: desklabadmin username across all the clients

=========================

Topology:

amrinder-HP-t620-Quad-Core-TC : Ansible Central Point 192.168.160.35
desklab-netscreen: Spoke 1 [Password Bassed Authentication] 192.168.160.1
desklab-fortigate: Spoke 2 [Public Private Key Pair] 192.168.160.10
desklab-centos: Spoke 3 [Public Private Key Pair] 192.168.160.36

Escalate privelege on the clients so that we can use sudo with it asking for the password.

sudo visudo
desklabadmin ALL=(ALL) NOPASSWD: ALL

This will allow desklabadmin to run priveleged commands using sudo but will not ask for the password.
===========================

Ansible Hosts: /etc/ansible/hosts 

[firewalls]
desklab-fortigate
desklab-netscreen
[servers]
desklab-centos

amrinder@:~$ ansible -m ping servers
desklab-centos | SUCCESS => {
    "changed": false, 
    "ping": "pong"
}


amrinder@:~$ ansible -m raw -a '/usr/bin/uptime' servers                
desklab-centos | CHANGED | rc=0 >>
 17:50:03 up 39 min,  3 users,  load average: 0.12, 0.06, 0.07
Shared connection to desklab-centos closed.

-a: action

amrinder@:~$ ansible -m shell -a 'uname -a' servers         
desklab-centos | CHANGED | rc=0 >>
Linux desklab-centos 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

============================

Simple and Powerful Ad-Hoc Tool [Running commands remotely]

amrinder@:~$ ansible servers -a 'whoami'
desklab-centos-kibana-data | CHANGED | rc=0 >>
root

desklab-centos-kibana-nodata | CHANGED | rc=0 >>
root

desklab-centos | CHANGED | rc=0 >>
desklabadmin

To become root, use -b option

amrinder@:~$ ansible servers -b -a 'whoami'
desklab-centos-kibana-data | CHANGED | rc=0 >>
root

desklab-centos-kibana-nodata | CHANGED | rc=0 >>
root

desklab-centos | CHANGED | rc=0 >>
root

amrinder@:~$ 

Ansible defaults to a command module, if you dont specify the module. 
Hundreds of modules in ansible

apt module for ubuntu
yum module for centos

amrinder@:~$ ansible servers -b -m yum -a 'name=httpd state=present'
desklab-centos-kibana-data | SUCCESS => {
    "ansible_facts": {
        "pkg_mgr": "yum"
    }, 
    "changed": false, 
    "msg": "", 
    "rc": 0, 
    "results": [
        "httpd-2.4.6-88.el7.centos.x86_64 providing httpd is already installed"
    ]
}
desklab-centos-kibana-nodata | SUCCESS => {
    "ansible_facts": {
        "pkg_mgr": "yum"
    }, 
    "changed": false, 
    "msg": "", 
    "rc": 0, 
    "results": [
        "httpd-2.4.6-88.el7.centos.x86_64 providing httpd is already installed"
    ]
}
desklab-centos | SUCCESS => {
    "ansible_facts": {
        "pkg_mgr": "yum"
    }, 
    "changed": false, 
    "msg": "", 
    "rc": 0, 
    "results": [
        "httpd-2.4.6-88.el7.centos.x86_64 providing httpd is already installed"
    ]
}

amrinder@:~$ ansible desklab-centos-kibana-nodata -m service  -a 'name=kibana enabled=true'

====================================

command module(default): Directly runs those commands (safest)
- does not use shell(Bash/sh)
- can't use pipes or redirects

ansible -m command -a 'echo "hello" > ~/abc.txt' servers

shell module (less safest)
- support pipes/redirects
- affected by bash settings

 ansible -m shell -a 'echo "hello" > ~/abc.txt' servers 

raw module (least safest)
- just sends commands over ssh
- does not python
- no abstraction

File Module:

ansible -m file -a 'path=/root/temp.txt state=absent' servers

Copy Module:

amrinder@:~$ ansible -b -m copy -a 'src=/etc/hosts dest=/etc/hosts' desklab-centos
desklab-centos | CHANGED => {
    "changed": true, 
    "checksum": "f07eca16c7ca13da4a2574aaf46aa13db25d8ce4", 
    "dest": "/etc/hosts", 
    "gid": 0, 
    "group": "root", 
    "md5sum": "a502344cad3fd07275f2d9d833289399", 
    "mode": "0644", 
    "owner": "root", 
    "secontext": "system_u:object_r:net_conf_t:s0", 
    "size": 382, 
    "src": "/home/desklabadmin/.ansible/tmp/ansible-tmp-1550865027.26-51322606162434/source", 
    "state": "file", 
    "uid": 0
}


When copying files like /etc/hosts, it is not possible to change the entries depending on where the file is being copied(dns for 127.0.0.1). That is why ansible in adhoc mode is powerful but limited.For do actions based on facts of computers, playbooks come into play. 

=================================

--- three dashes indicate it is a yaml file

In YAML, whitespaces are very important

you run the playbook using ansible-playbook command

ansible-playbook first.yaml 

How YAML file looks like:

amrinder@:~/AnsibleLearning$ cat first.yaml 
---

- hosts: ubuntu
  become: yes
  tasks:
   - name: do a uname
     shell: uname -a > ~/results.txt
   - name: whoami
     shell: whoami >> ~/results.txt

	 
Become makes it root, when running the command. You can pass this argument from command line when running the playbook as well.

ansible-playbook -b first.yaml 

Visualization of this in python(JSON) looks like this:

[{'become': True,
  'hosts': 'ubuntu',
  'tasks': [{'name': 'do a uname', 'shell': 'uname -a > ~/results.txt'},
            {'name': 'whoami', 'shell': 'whoami >> ~/results.txt'}]}]


ansible-playbook -v first.yaml  
-v flag gives detailed information on what playbook is doing

=============================
Reference file second.yaml
Handler: It is a task, but only called if there is a change made and executed only once even if multiple tasks call it.
ignore_errors: yes -- this will other tasks run even if there are some errors in one task. [No apt for centos machines]

second.yaml
---

- hosts: servers
  become: yes
  tasks:
   - name: install vsftpd on ubuntu
     apt: name=vsftpd update_cache=yes state=latest
     ignore_errors: yes
     notify: start vsftpd
   - name: install vsftpd on centos
     yum: name=vsftpd state=latest
     ignore_errors: yes
     notify: start vsftpd
  handlers:
   - name: start vsftpd
     service: name=vsftpd enabled=yes start=started

=============================

Ansible creates variables from the hosts it call FACTS, it is all of the information about the host that we can use inside the playbooks
In order to see what they are, module in adhoc mode called setup

Reference file third.yaml

To see the list of FACTS about a server: 

ansible ubuntu -m setup

It includes cpu type, os family, ram, ip, cpu cores etc.
 
To filter the results:

ansible ubuntu -m setup -a "filter=*family*"
ansible ubuntu -m setup -a "filter=*ip*"

==============================

registering variables: result of one particular module become a variables

displaying results:  registered variables output is in JSON 

JSON

Reference file: fourth.yaml

=================================

Reference file: fifth.yaml

when is the keyword which is used in ansible

do something when this 
do something when that
do something when blah blah blah

=============================

with_items
with_file
with_sequence

Reference file: sixth.yaml seventh.yaml

=============================

Jinja 2
Variables
Comments {# #}

Reference file: eighth.yaml

=============================

Ansible Vault - Encrypt playbooks
When run the playbook, password with text file(--vault-password-file) or enter it manually(--ask-vault-pass).

chmod 400 permissions, password file only readable by the user.

Create the encrypted yaml file using

ansible-vault create test.yaml

It won't be readable to executable untill --vault-password-file or --ask-vault-pass is not passed.

To edit

ansible-vault edit test.yaml

============================
















